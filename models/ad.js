const mongoose = require('mongoose');
const crypto = require('crypto');
const EventEmitter = require('events');
const Sentry = require('@sentry/node');
const i18n = require('i18n');
const config = require('../config');

// Event emitter for ad-related notifications
const adEvents = new EventEmitter();

// Define Ad Schema
const adSchema = new mongoose.Schema({
    title: {
        type: String,
        required: [true, 'Ad title is required'],
        trim: true,
        maxlength: [100, 'Ad title must not exceed 100 characters']
    },
    description: {
        type: String,
        trim: true,
        maxlength: [500, 'Ad description must not exceed 500 characters']
    },
    advertiser: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User', // Link to User model (advertiser role)
        required: true
    },
    targetAudience: {
        demographics: {
            ageRange: { type: [Number], default: [18, 65] }, // e.g., [18, 65]
            gender: { type: String, enum: ['male', 'female', 'all'], default: 'all' },
            interests: { type: [String], default: [] }
        },
        location: {
            type: [String], // e.g., ['New York', 'California']
            default: []
        }
    },
    budget: {
        type: Number,
        required: true,
        min: [1, 'Budget must be at least 1']
    },
    bidAmount: {
        type: Number,
        required: true,
        min: [0.01, 'Bid amount must be at least 0.01']
    },
    status: {
        type: String,
        enum: ['active', 'paused', 'completed', 'cancelled'],
        default: 'active'
    },
    impressions: { type: Number, default: 0 },
    clicks: { type: Number, default: 0 },
    conversions: { type: Number, default: 0 },
    fraudScore: { type: Number, default: 0 }, // For fraud detection
    aiTags: {
        type: [String], // Tags generated by AI for ad categorization
        default: []
    },
    createdAt: {
        type: Date,
        default: Date.now
    },
    updatedAt: {
        type: Date,
        default: Date.now
    }
}, { timestamps: true });

// Indexes for efficient querying
adSchema.index({ advertiser: 1 });
adSchema.index({ status: 1 });
adSchema.index({ 'targetAudience.location': 1 });

// Pre-Save Middleware: Update Timestamp and Run Fraud Detection
adSchema.pre('save', function (next) {
    this.updatedAt = Date.now();

    // Integrate with Fraud Detection Middleware
    this.fraudScore = calculateFraudScore(this);
    if (this.fraudScore > config.fraudThreshold) {
        adEvents.emit('highFraudScore', this);
    }
    next();
});

// Instance Method: Calculate Real-Time Ad Performance
adSchema.methods.calculatePerformance = function () {
    const ctr = (this.clicks / this.impressions) * 100; // Click-Through Rate
    const conversionRate = (this.conversions / this.clicks) * 100; // Conversion Rate
    return { ctr, conversionRate };
};

// Static Method: Fetch Ads by Target Audience
adSchema.statics.fetchTargetedAds = async function (location, demographics) {
    return this.find({
        'targetAudience.location': { $in: location },
        'targetAudience.demographics.ageRange': { $gte: demographics.age[0], $lte: demographics.age[1] }
    });
};

// Static Method: Log Audit Events
adSchema.statics.logAuditEvent = async function (adId, event) {
    try {
        console.log(`Audit Event for Ad ${adId}: ${event}`);
        // Replace with database or logging service
    } catch (err) {
        Sentry.captureException(err);
    }
};

// Post-Save Hook: Emit Event for Ad Status Change
adSchema.post('save', function (doc) {
    if (this.isModified('status')) {
        adEvents.emit('statusChanged', doc);
    }
});

// Post-Remove Hook: Cleanup Related Data
adSchema.post('remove', function (doc) {
    adEvents.emit('adRemoved', doc);
});

// Event Handlers
adEvents.on('highFraudScore', (ad) => {
    console.warn(`Ad ${ad.title} flagged for high fraud score: ${ad.fraudScore}`);
    Sentry.captureMessage(`High fraud score detected for Ad ${ad._id}`);
});

adEvents.on('statusChanged', (ad) => {
    console.log(`Ad ${ad.title} status changed to ${ad.status}`);
});

adEvents.on('adRemoved', (ad) => {
    console.log(`Ad ${ad.title} was removed`);
});

// Helper Function: Calculate Fraud Score
function calculateFraudScore(ad) {
    // Placeholder logic for calculating fraud score
    return Math.random() * 100; // Replace with actual implementation
}

// Export the Ad Model
module.exports = mongoose.model('Ad', adSchema);